class PaginationHelper:

    # The constructor takes in an array of items and an integer indicating
    # how many items fit within a single page
    def __init__(self, collection, items_per_page):
        self.collection = collection
        self.items_per_page = items_per_page

    # returns the number of items within the entire collection
    def item_count(self):
        return len(self.collection)

    # returns the number of pages
    def page_count(self):

        return (len(self.collection) + self.items_per_page - 1) // self.items_per_page

    # returns the number of items on the given page. page_index is zero based
    # this method should return -1 for page_index values that are out of range
    def page_item_count(self, page_index):
        total_pages = self.page_count()
        if page_index < 0 or page_index >= total_pages:
            return -1

        if page_index == total_pages - 1:  # если это последняя страница
            remainder = len(self.collection) % self.items_per_page
            return remainder if remainder != 0 else self.items_per_page
        else:
            return self.items_per_page


    # this method should return -1 for item_index values that are out of range
    def page_index(self, item_index):
        if item_index < 0 or item_index >= len(self.collection):
            return -1
        return (item_index ) // self.items_per_page
